import { useState, useEffect } from "react";
import IncomeExpense from "./Components/IncomeExpense";
import ChartSection from "./Components/Charts";
import Transactions from "./Components/Transactions";
import Categories from "./Components/Categories";

function App() {
  const [transactions, setTransactions] = useState([]);
  const [categories, setCategories] = useState([
    { id: 1, name: "Salary", type: "income" },
    { id: 2, name: "Freelance", type: "income" },
    { id: 3, name: "Food", type: "expense" },
    { id: 4, name: "Transport", type: "expense" },
  ]);

  // Load data from localStorage
  useEffect(() => {
    const savedTransactions = JSON.parse(localStorage.getItem("transactions")) || [];
    const savedCategories = JSON.parse(localStorage.getItem("categories")) || categories;
    setTransactions(savedTransactions);
    setCategories(savedCategories);
  }, []);

  // Save data to localStorage
  useEffect(() => {
    localStorage.setItem("transactions", JSON.stringify(transactions));
  }, [transactions]);

  useEffect(() => {
    localStorage.setItem("categories", JSON.stringify(categories));
  }, [categories]);

  const addTransaction = (transaction) => {
    const newTransaction = {
      ...transaction,
      id: Date.now(),
      date: new Date().toLocaleString(),
    };
    setTransactions([...transactions, newTransaction]);
  };

  const addCategory = (category) => {
    const newCategory = {
      ...category,
      id: Date.now(),
    };
    setCategories([...categories, newCategory]);
  };

  const deleteTransaction = (id) => {
    setTransactions(transactions.filter(transaction => transaction.id !== id));
  };

  const deleteCategory = (id) => {
    setCategories(categories.filter(category => category.id !== id));
  };

  const updateTransaction = (id, updatedTransaction) => {
    setTransactions(transactions.map(transaction => 
      transaction.id === id ? { ...transaction, ...updatedTransaction } : transaction
    ));
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <IncomeExpense
          transactions={transactions}
          categories={categories}
          addTransaction={addTransaction}
          addCategory={addCategory}
        />
        <ChartSection transactions={transactions} categories={categories} />
      </div>
      
      <Transactions
        transactions={transactions}
        deleteTransaction={deleteTransaction}
        updateTransaction={updateTransaction}
        categories={categories}
      />
      
      <Categories
        categories={categories}
        deleteCategory={deleteCategory}
      />
    </div>
  );
}

export default App;

import { FaRupeeSign } from 'react-icons/fa';
import { FiTrash2 } from 'react-icons/fi';

const Categories = ({ categories, deleteCategory }) => {
  const incomeCategories = categories.filter(cat => cat.type === 'income');
  const expenseCategories = categories.filter(cat => cat.type === 'expense');

  return (
    <div className="flex-col bg-white p-6 rounded-lg shadow-md mt-8">
      <h2 className="text-xl font-semibold mb-4">Categories</h2>
      
      <div className="mb-6">
        <h3 className="text-lg font-medium mb-3 text-green-600">Income Categories</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {incomeCategories.map(cat => (
                <tr key={cat.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{cat.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <button
                      onClick={() => deleteCategory(cat.id)}
                      className="text-red-600 hover:text-red-900"
                    >
                      <FiTrash2 />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div>
        <h3 className="text-lg font-medium mb-3 text-red-600">Expense Categories</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {expenseCategories.map(cat => (
                <tr key={cat.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{cat.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <button
                      onClick={() => deleteCategory(cat.id)}
                      className="text-red-600 hover:text-red-900"
                    >
                      <FiTrash2 />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Categories;

import { useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

// Color variations for income (green) and expense (red)
const INCOME_COLORS = ['#83f28f', '#5cd86c', '#3bbf4a', '#1da62e', '#0c8c1c'];
const EXPENSE_COLORS = ['#ff6961', '#e8534b', '#d13d36', '#b82620', '#9e0f0b'];

const Chart = ({ transactions, categories }) => {
  const [chartType, setChartType] = useState('type');

  // Calculate totals
  const totalIncome = transactions
    .filter(t => t.type === 'income')
    .reduce((sum, t) => sum + parseFloat(t.amount), 0);
  
  const totalExpense = transactions
    .filter(t => t.type === 'expense')
    .reduce((sum, t) => sum + parseFloat(t.amount), 0);
  
  const balance = totalIncome - totalExpense;

  // Prepare data for bar chart (income vs expense vs balance)
  const typeData = [
    {
      name: 'Income',
      amount: totalIncome,
    },
    {
      name: 'Expense',
      amount: totalExpense,
    },
    {
      name: 'Balance',
      amount: balance,
    },
  ];

  // Prepare data for pie chart (by category)
  const getCategoryData = (type) => {
    const filteredCategories = categories.filter(cat => cat.type === type);
    
    return filteredCategories.map(cat => {
      const total = transactions
        .filter(t => t.type === type && t.category === cat.name)
        .reduce((sum, t) => sum + parseFloat(t.amount), 0);
      
      return {
        name: cat.name,
        value: total,
      };
    }).filter(item => item.value > 0);
  };

  const incomeCategoryData = getCategoryData('income');
  const expenseCategoryData = getCategoryData('expense');

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-xl font-semibold mb-4">Charts</h2>
      
      <div className="mb-4">
        <label className="block text-sm font-medium mb-1">Chart View</label>
        <select
          value={chartType}
          onChange={(e) => setChartType(e.target.value)}
          className="w-full p-2 border rounded"
        >
          <option value="type">Income vs Expense</option>
          <option value="income">Income by Category</option>
          <option value="expense">Expense by Category</option>
        </select>
      </div>

      <div className="h-64">
        {chartType === 'type' ? (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={typeData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip 
                formatter={(value) => [`${value.toFixed(2)}`, 'Amount']}
              />
              <Legend />
              <Bar 
                dataKey="amount" 
                name="Amount"
                shape={({ x, y, width, height, name }) => {
                  let fillColor;
                  if (name === 'Income') fillColor = '#1fd655'; // Green for income
                  else if (name === 'Expense') fillColor = '#ff2c2c'; // Red for expense
                  else fillColor = '#3b82f6'; // Blue for balance
                  
                  return <rect x={x} y={y} width={width} height={height} fill={fillColor} rx={2} />;
                }}
              />
            </BarChart>
          </ResponsiveContainer>
        ) : chartType === 'income' ? (
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={incomeCategoryData}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#83f28f"
                dataKey="value"
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
              >
                {incomeCategoryData.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={INCOME_COLORS[index % INCOME_COLORS.length]} 
                  />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value) => [`${value.toFixed(2)}`, 'Amount']}
              />
            </PieChart>
          </ResponsiveContainer>
        ) : (
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={expenseCategoryData}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#ff6961"
                dataKey="value"
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
              >
                {expenseCategoryData.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={EXPENSE_COLORS[index % EXPENSE_COLORS.length]} 
                  />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value) => [`${value.toFixed(2)}`, 'Amount']}
              />
            </PieChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  );
};

export default Chart;

import { useState } from "react";
import { FaRupeeSign } from "react-icons/fa";

const IncomeExpense = ({
  transactions,
  categories,
  addTransaction,
  addCategory,
}) => {
  const [transaction, setTransaction] = useState({
    type: "expense",
    category: "",
    amount: "",
  });
  const [newCategory, setNewCategory] = useState({
    name: "",
    type: "expense",
  });
  const [showCategoryForm, setShowCategoryForm] = useState(false);
  const [categoryError, setCategoryError] = useState("");

  const incomeCategories = categories.filter((cat) => cat.type === "income");
  const expenseCategories = categories.filter((cat) => cat.type === "expense");

  const totalIncome = transactions
    .filter((t) => t.type === "income")
    .reduce((sum, t) => sum + parseFloat(t.amount), 0);

  const totalExpense = transactions
    .filter((t) => t.type === "expense")
    .reduce((sum, t) => sum + parseFloat(t.amount), 0);

  const balance = totalIncome - totalExpense;



  const handleSubmit = (e) => {
    e.preventDefault();
    if (!transaction.category || !transaction.amount) return;
    addTransaction(transaction);
    setTransaction({
      type: "expense",
      category: "",
      amount: "",
    });
  };
  const handleAddCategory = (e) => {
    e.preventDefault();
    if (!newCategory.name) return;

    // Reset error
    setCategoryError("");

    // Check for duplicate category
    const categoryName = newCategory.name.trim();
    if (!categoryName) {
      setCategoryError('Category name cannot be empty!');
      return;
    }
    const categoryExists = categories.some(
      (cat) => cat.name.toLowerCase() === categoryName.toLowerCase()
    );

    if (categoryExists) {
      setCategoryError("This category already exists!");
      return;
    }
    

    addCategory(newCategory);
    setNewCategory({
      name: "",
      type: "expense",
    });
    setShowCategoryForm(false);
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-xl font-semibold mb-4">Income & Expense</h2>

      <div className="grid grid-cols-3 gap-4 mb-6">
        <div className="bg-green-100 p-4 rounded-lg">
          <h3 className="text-sm text-green-800">Income</h3>
          <p className="text-xl font-bold text-green-800">
            <FaRupeeSign className="inline mr-1" />
            {totalIncome.toFixed(2)}
          </p>
        </div>
        <div className="bg-red-100 p-4 rounded-lg">
          <h3 className="text-sm text-red-800">Expense</h3>
          <p className="text-xl font-bold text-red-800">
            <FaRupeeSign className="inline mr-1" />
            {totalExpense.toFixed(2)}
          </p>
        </div>
        <div
          className={`p-4 rounded-lg ${
            balance >= 0
              ? "bg-blue-100 text-blue-800"
              : "bg-orange-100 text-orange-800"
          }`}
        >
          <h3 className="text-sm">Balance</h3>
          <p className="text-xl font-bold">
            <FaRupeeSign className="inline mr-1" />
            {balance.toFixed(2)}
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="mb-6">
        <div className="mb-4">
          <label className="block text-sm font-medium mb-1">Type</label>
          <select
            value={transaction.type}
            onChange={(e) =>
              setTransaction({ ...transaction, type: e.target.value })
            }
            className="w-full p-2 border rounded"
          >
            <option value="income">Income</option>
            <option value="expense">Expense</option>
          </select>
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-1">Category</label>
          <div className="flex gap-2">
            <select
              value={transaction.category}
              onChange={(e) =>
                setTransaction({ ...transaction, category: e.target.value })
              }
              className="flex-1 p-2 border rounded"
              required
            >
              <option value="">Select Category</option>
              {(transaction.type === "income"
                ? incomeCategories
                : expenseCategories
              ).map((cat) => (
                <option key={cat.id} value={cat.name}>
                  {cat.name}
                </option>
              ))}
            </select>
            <button
              type="button"
              onClick={() => setShowCategoryForm(!showCategoryForm)}
              className="bg-gray-200 hover:bg-gray-300 px-3 rounded"
            >
              +
            </button>
          </div>
        </div>

        {showCategoryForm && (
          <div className="mb-4 p-3 bg-gray-50 rounded">
            <h4 className="text-sm font-medium mb-2">Add New Category</h4>
            {categoryError && (
              <p className="text-red-500 text-xs mb-2">{categoryError}</p>
            )}
            <div className="flex gap-2 mb-2">
              <input
                type="text"
                placeholder="Category Name"
                value={newCategory.name}
                onChange={(e) =>
                  setNewCategory({ ...newCategory, name: e.target.value })
                }
                className="flex-1 p-2 border rounded"
                required
              />
              <select
                value={newCategory.type}
                onChange={(e) =>
                  setNewCategory({ ...newCategory, type: e.target.value })
                }
                className="p-2 border rounded"
              >
                <option value="income">Income</option>
                <option value="expense">Expense</option>
              </select>
            </div>
            <div className="flex justify-end gap-2">
              <button
                type="button"
                onClick={() => setShowCategoryForm(false)}
                className="px-3 py-1 bg-gray-200 rounded"
              >
                Cancel
              </button>
              <button
                type="button"
                onClick={handleAddCategory}
                className="px-3 py-1 bg-blue-500 text-white rounded"
              >
                Add
              </button>
            </div>
          </div>
        )}

        <div className="mb-4">
          <label className="block text-sm font-medium mb-1">Amount</label>
          <div className="relative">
            <span className="absolute inset-y-0 left-0 flex items-center pl-2 text-gray-600">
              <FaRupeeSign />
            </span>
            <input
              type="number"
              value={transaction.amount}
              onChange={(e) =>
                setTransaction({ ...transaction, amount: e.target.value })
              }
              className="w-full pl-8 p-2 border rounded"
              required
            />
          </div>
        </div>

        <button
          type="submit"
          className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
        >
          Add Transaction
        </button>
      </form>
    </div>
  );
};

export default IncomeExpense;


import { useState } from 'react';
import { FaRupeeSign } from 'react-icons/fa';
import { FiTrash2, FiEdit2 } from 'react-icons/fi';

const Transaction = ({ transactions, deleteTransaction, updateTransaction, categories }) => {
  const [editingId, setEditingId] = useState(null);
  const [editData, setEditData] = useState({
    type: '',
    category: '',
    amount: ''
  });

  const incomeCategories = categories.filter(cat => cat.type === 'income');
  const expenseCategories = categories.filter(cat => cat.type === 'expense');

  const handleEdit = (transaction) => {
    setEditingId(transaction.id);
    setEditData({
      type: transaction.type,
      category: transaction.category,
      amount: transaction.amount
    });
  };

  const handleUpdate = (e) => {
    e.preventDefault();
    updateTransaction(editingId, editData);
    setEditingId(null);
  };

  const handleCancelEdit = () => {
    setEditingId(null);
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-xl font-semibold mb-4">Transaction History</h2>
      
      {transactions.length === 0 ? (
        <p className="text-gray-500">No transactions yet</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Category</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Amount</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {transactions.map((transaction) => (
                <tr key={transaction.id}>
                  {editingId === transaction.id ? (
                    <>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <select
                          value={editData.type}
                          onChange={(e) => setEditData({...editData, type: e.target.value})}
                          className="p-2 border rounded"
                        >
                          <option value="income">Income</option>
                          <option value="expense">Expense</option>
                        </select>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <select
                          value={editData.category}
                          onChange={(e) => setEditData({...editData, category: e.target.value})}
                          className="p-2 border rounded"
                        >
                          <option value="">Select Category</option>
                          {(editData.type === 'income' ? incomeCategories : expenseCategories).map(cat => (
                            <option key={cat.id} value={cat.name}>{cat.name}</option>
                          ))}
                        </select>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="relative">
                          <span className="absolute inset-y-0 left-0 flex items-center pl-2 text-gray-600">
                            <FaRupeeSign />
                          </span>
                          <input
                            type="number"
                            value={editData.amount}
                            onChange={(e) => setEditData({...editData, amount: e.target.value})}
                            className="pl-8 p-2 border rounded"
                          />
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {transaction.date}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex space-x-2">
                          <button
                            onClick={handleUpdate}
                            className="text-green-600 hover:text-green-900"
                          >
                            Save
                          </button>
                          <button
                            onClick={handleCancelEdit}
                            className="text-gray-600 hover:text-gray-900"
                          >
                            Cancel
                          </button>
                        </div>
                      </td>
                    </>
                  ) : (
                    <>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          transaction.type === 'income' 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-red-100 text-red-800'
                        }`}>
                          {transaction.type}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {transaction.category}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm ${
                        transaction.type === 'income' ? 'text-green-600' : 'text-red-600'
                      }">
                        <FaRupeeSign className="inline mr-1" />
                        {parseFloat(transaction.amount).toFixed(2)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {transaction.date}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleEdit(transaction)}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            <FiEdit2 />
                          </button>
                          <button
                            onClick={() => deleteTransaction(transaction.id)}
                            className="text-red-600 hover:text-red-900"
                          >
                            <FiTrash2 />
                          </button>
                        </div>
                      </td>
                    </>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default Transaction;